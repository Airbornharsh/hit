name: Build and Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            ext: ""
            target: linux-amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            ext: ""
            target: linux-arm64
          - os: macos-latest
            goos: darwin
            goarch: amd64
            ext: ""
            target: darwin-amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
            ext: ""
            target: darwin-arm64
          - os: windows-latest
            goos: windows
            goarch: amd64
            ext: ".exe"
            target: windows-amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25"

      - name: Get version from tag
        id: get_version
        shell: bash
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION=${GITHUB_REF#refs/tags/}
            if [ "$VERSION" == "$GITHUB_REF" ]; then
              VERSION="dev-$(git rev-parse --short HEAD)"
            fi
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Build binary
        shell: bash
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          go build -ldflags="-s -w -X main.version=${{ steps.get_version.outputs.VERSION }}" -o hit${{ matrix.ext }} ./main.go
          if [ "${{ matrix.goos }}" != "windows" ]; then
            chmod +x hit${{ matrix.ext }}
          fi
          ls -lh hit${{ matrix.ext }}
          file hit${{ matrix.ext }} || true

      - name: Create archive
        shell: bash
        run: |
          if [ "${{ matrix.goos }}" == "windows" ]; then
            ARCHIVE_NAME="hit-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}.zip"
            if command -v 7z &> /dev/null; then
              7z a "$ARCHIVE_NAME" hit${{ matrix.ext }}
            else
              zip "$ARCHIVE_NAME" hit${{ matrix.ext }}
            fi
          else
            ARCHIVE_NAME="hit-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}.tar.gz"
            tar -czf "$ARCHIVE_NAME" hit${{ matrix.ext }}
          fi
          ls -lh "$ARCHIVE_NAME"
          echo "ARCHIVE_NAME=$ARCHIVE_NAME" >> $GITHUB_ENV

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: hit-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}
          path: ${{ env.ARCHIVE_NAME }}
          if-no-files-found: error
          retention-days: 1

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version and tag
        id: get_version
        shell: bash
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=${TAG_NAME#v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          echo "Tag: $TAG_NAME"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release files
        shell: bash
        run: |
          mkdir -p release-files
          echo "Artifacts structure:"
          find artifacts -type f || true
          echo ""
          echo "Listing all files in artifacts:"
          find artifacts -type f -name "*.tar.gz" -o -name "*.zip" || true
          echo ""
          # Copy all archive files to release-files
          find artifacts -type f \( -name "*.tar.gz" -o -name "*.zip" \) -exec cp {} release-files/ \;
          echo ""
          echo "Files prepared for release:"
          ls -lh release-files/ || true
          if [ ! "$(ls -A release-files 2>/dev/null)" ]; then
            echo "ERROR: No files found for release!"
            exit 1
          fi

      - name: Create checksums
        shell: bash
        run: |
          cd release-files
          for file in *.tar.gz *.zip; do
            if [ -f "$file" ]; then
              sha256sum "$file" > "$file.sha256"
            fi
          done
          echo "Checksums created:"
          ls -la *.sha256 || true

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.TAG_NAME }}
          name: Release v${{ steps.get_version.outputs.VERSION }}
          body: |
            ## Hit ${{ steps.get_version.outputs.VERSION }}

            ### Installation

            #### macOS (Homebrew)
            ```bash
            brew tap airbornharsh/hit
            brew install hit
            ```

            #### Linux (apt)
            ```bash
            curl -fsSL https://apt.airbornharsh.dev/hit/gpg.key | sudo apt-key add -
            echo "deb https://apt.airbornharsh.dev/hit/ stable main" | sudo tee /etc/apt/sources.list.d/hit.list
            sudo apt update
            sudo apt install hit
            ```

            #### Windows (Scoop)
            ```powershell
            scoop bucket add airbornharsh https://github.com/airbornharsh/scoop-bucket
            scoop install hit
            ```

            ### Manual Installation

            Download the appropriate binary for your platform:
            - Linux AMD64: `hit-${{ steps.get_version.outputs.VERSION }}-linux-amd64.tar.gz`
            - Linux ARM64: `hit-${{ steps.get_version.outputs.VERSION }}-linux-arm64.tar.gz`
            - macOS AMD64: `hit-${{ steps.get_version.outputs.VERSION }}-darwin-amd64.tar.gz`
            - macOS ARM64: `hit-${{ steps.get_version.outputs.VERSION }}-darwin-arm64.tar.gz`
            - Windows AMD64: `hit-${{ steps.get_version.outputs.VERSION }}-windows-amd64.zip`
          draft: false
          prerelease: false
          files: |
            release-files/*.tar.gz
            release-files/*.zip
            release-files/*.sha256
